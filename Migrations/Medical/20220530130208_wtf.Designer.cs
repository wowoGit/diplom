// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using testing.Models;

namespace testing.Migrations.Medical
{
    [DbContext(typeof(MedicalContext))]
    [Migration("20220530130208_wtf")]
    partial class wtf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "bloodtype", new[] { "ZERO_plus", "ZERO_minus", "A_plus", "A_minus", "B_plus", "B_minus", "AB_plus", "AB_minus" })
                .HasPostgresEnum(null, "gender", new[] { "male", "female" })
                .HasAnnotation("Relational:Collation", "Russian_Russia.1251")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("testing.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('appoitment_id_seq'::regclass)");

                    b.Property<string>("Info")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("info");

                    b.Property<string>("MedcardId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medcard_id");

                    b.Property<int?>("ReferralId")
                        .HasColumnType("integer")
                        .HasColumnName("referral_id");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MedcardId" }, "IX_appoitment_medcard_id");

                    b.HasIndex(new[] { "ReferralId" }, "IX_appoitment_referral_id");

                    b.HasIndex(new[] { "ScheduleId" }, "IX_appoitment_schedule_id");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("testing.Models.Completedmeeting", b =>
                {
                    b.Property<DateTime>("App_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("App_info")
                        .HasColumnType("text");

                    b.Property<string>("D_fname")
                        .HasColumnType("text");

                    b.Property<string>("D_lname")
                        .HasColumnType("text");

                    b.Property<string>("D_patro")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Datec")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datec");

                    b.Property<DateTime?>("Dateo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateo");

                    b.Property<DateTime?>("Dateop")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateop");

                    b.Property<string>("Diag")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("diag");

                    b.Property<string>("Doc")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("doc");

                    b.Property<string>("Dose")
                        .HasColumnType("text");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fname");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lname");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Pname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pname");

                    b.Property<string>("Proc_result")
                        .HasColumnType("text");

                    b.ToTable("completedmeetings");
                });

            modelBuilder.Entity("testing.Models.Declaration", b =>
                {
                    b.Property<string>("MedcardId")
                        .HasColumnType("text")
                        .HasColumnName("medcard_id");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.Property<DateTime>("SignDate")
                        .HasColumnType("date")
                        .HasColumnName("sign_date");

                    b.HasKey("MedcardId")
                        .HasName("declaration_pkey");

                    b.HasIndex(new[] { "DoctorId" }, "IX_declaration_doctor_id");

                    b.ToTable("declaration");
                });

            modelBuilder.Entity("testing.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"Department_id_seq\"'::regclass)");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("department");
                });

            modelBuilder.Entity("testing.Models.Doctor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("about");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<int>("Cabinet")
                        .HasColumnType("integer")
                        .HasColumnName("cabinet");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("date")
                        .HasColumnName("employment_date");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId")
                        .HasName("doctor_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_doctor_department_id");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("testing.Models.Doctorsperdep", b =>
                {
                    b.Property<long?>("DoctorsInDepartment")
                        .HasColumnType("bigint")
                        .HasColumnName("doctors in department");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.ToTable("doctorsperdep");
                });

            modelBuilder.Entity("testing.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("document");
                });

            modelBuilder.Entity("testing.Models.Familydoctor", b =>
                {
                    b.Property<int?>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("PatientFname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patient fname");

                    b.Property<string>("PatientLname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patient lname");

                    b.Property<string>("PatientPatro")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patient patro");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("date")
                        .HasColumnName("sign_date");

                    b.Property<long?>("TotalPatients")
                        .HasColumnType("bigint")
                        .HasColumnName("total patients");

                    b.ToTable("familydoctors");
                });

            modelBuilder.Entity("testing.Models.Freeappointmentsweek", b =>
                {
                    b.Property<int?>("Cabinet")
                        .HasColumnType("integer")
                        .HasColumnName("cabinet");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.ToTable("freeappointmentsweek");
                });

            modelBuilder.Entity("testing.Models.Headdepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DoctorId" }, "IX_headdepartment_doctor_id");

                    b.ToTable("headdepartment");
                });

            modelBuilder.Entity("testing.Models.History", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("diagnosis");

                    b.HasKey("AppointmentId")
                        .HasName("History_pkey");

                    b.ToTable("history");
                });

            modelBuilder.Entity("testing.Models.Historydocument", b =>
                {
                    b.Property<int>("HistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.HasKey("HistoryId", "DocumentId")
                        .HasName("historydocument_pkey");

                    b.HasIndex(new[] { "DocumentId" }, "IX_historydocument_document_id");

                    b.ToTable("historydocument");
                });

            modelBuilder.Entity("testing.Models.Historymedication", b =>
                {
                    b.Property<int>("HistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    b.Property<int>("MedicationId")
                        .HasColumnType("integer")
                        .HasColumnName("medication_id");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("dose");

                    b.HasKey("HistoryId", "MedicationId")
                        .HasName("historymedication_pkey");

                    b.HasIndex(new[] { "MedicationId" }, "IX_historymedication_medication_id");

                    b.ToTable("historymedication");
                });

            modelBuilder.Entity("testing.Models.Historyprocedure", b =>
                {
                    b.Property<int>("HistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("integer")
                        .HasColumnName("procedure_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.HasKey("HistoryId", "ProcedureId")
                        .HasName("historyprocedure_pkey");

                    b.HasIndex(new[] { "ProcedureId" }, "IX_historyprocedure_procedure_id");

                    b.ToTable("historyprocedure");
                });

            modelBuilder.Entity("testing.Models.Manager", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("employment_date");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.HasKey("UserId")
                        .HasName("manager_pkey");

                    b.ToTable("manager");
                });

            modelBuilder.Entity("testing.Models.Medcard", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("text")
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expired_date");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("issued_date");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("manager_id");

                    b.HasKey("PatientId")
                        .HasName("medcard_pkey");

                    b.HasIndex(new[] { "ManagerId" }, "IX_medcard_manager_id");

                    b.HasIndex(new[] { "PatientId" }, "medcard_patient_id_patient_id1_key")
                        .IsUnique();

                    b.ToTable("medcard");
                });

            modelBuilder.Entity("testing.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("medication");
                });

            modelBuilder.Entity("testing.Models.Patient", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<BloodType>("BloodType")
                        .HasColumnType("public.bloodtype")
                        .HasColumnName("blood_type");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.Property<DateTime>("SignDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sign_date");

                    b.HasKey("UserId")
                        .HasName("patient_pkey");

                    b.HasIndex(new[] { "UserId" }, "IX_Patients_UserId");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("testing.Models.Patientinfo", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FamilyDoctorFname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("family doctor fname");

                    b.Property<string>("FamilyDoctorLname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("family doctor lname");

                    b.Property<string>("FamilyDoctorPatro")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("family doctor patro");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.Property<DateTime?>("SignDate")
                        .HasColumnType("date")
                        .HasColumnName("sign_date");

                    b.ToTable("patientinfo");
                });

            modelBuilder.Entity("testing.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("procedure");
                });

            modelBuilder.Entity("testing.Models.Referral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DeclarationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("declaration_id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<DateTime>("IssuedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("issued_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_referral_department_id");

                    b.HasIndex(new[] { "DeclarationId" }, "IX_referral_medcard_id");

                    b.ToTable("referral");
                });

            modelBuilder.Entity("testing.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("testing.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("doctor_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DoctorId" }, "IX_schedule_doctor_id");

                    b.ToTable("schedule");
                });

            modelBuilder.Entity("testing.Models.Weekschedule", b =>
                {
                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("DoctorFname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("doctor fname");

                    b.Property<string>("DoctorLname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("doctor lname");

                    b.Property<string>("DoctorPatronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("doctor patronymic");

                    b.Property<int?>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Info")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("info");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("patronymic");

                    b.Property<int?>("ReferralId")
                        .HasColumnType("integer")
                        .HasColumnName("referral_id");

                    b.ToTable("weekschedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("testing.Models.Appointment", b =>
                {
                    b.HasOne("testing.Models.Medcard", "Medcard")
                        .WithMany("Appointments")
                        .HasForeignKey("MedcardId")
                        .HasConstraintName("appoitment_medcard_id_fkey")
                        .IsRequired();

                    b.HasOne("testing.Models.Referral", "Referral")
                        .WithMany("Appointments")
                        .HasForeignKey("ReferralId")
                        .HasConstraintName("appoitment_referral_id_fkey");

                    b.HasOne("testing.Models.Schedule", "Schedule")
                        .WithMany("Appointments")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("appoitment_schedule_id_fkey")
                        .IsRequired();

                    b.Navigation("Medcard");

                    b.Navigation("Referral");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("testing.Models.Declaration", b =>
                {
                    b.HasOne("testing.Models.Doctor", "Doctor")
                        .WithMany("Declarations")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("declaration_doctor_id_fkey")
                        .IsRequired();

                    b.HasOne("testing.Models.Medcard", "Medcard")
                        .WithOne("Declaration")
                        .HasForeignKey("testing.Models.Declaration", "MedcardId")
                        .HasConstraintName("declaration_medcard_id_fkey")
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Medcard");
                });

            modelBuilder.Entity("testing.Models.Doctor", b =>
                {
                    b.HasOne("testing.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("doctor_department_id_fkey")
                        .IsRequired();

                    b.HasOne("testing.Models.Role", "Role")
                        .WithMany("Doctors")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_doctor_Role_RoleId1")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("testing.Models.Headdepartment", b =>
                {
                    b.HasOne("testing.Models.Doctor", "Doctor")
                        .WithMany("Headdepartments")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("headdepartment_doctor_id_fkey")
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("testing.Models.History", b =>
                {
                    b.HasOne("testing.Models.Appointment", "Appointment")
                        .WithOne("History")
                        .HasForeignKey("testing.Models.History", "AppointmentId")
                        .HasConstraintName("history_appointment_id_fkey")
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("testing.Models.Historydocument", b =>
                {
                    b.HasOne("testing.Models.Document", "Document")
                        .WithMany("Historydocuments")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("historydocument_document_id_fkey")
                        .IsRequired();

                    b.HasOne("testing.Models.History", "History")
                        .WithMany("Historydocuments")
                        .HasForeignKey("HistoryId")
                        .HasConstraintName("historydocument_history_id_fkey")
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("History");
                });

            modelBuilder.Entity("testing.Models.Historymedication", b =>
                {
                    b.HasOne("testing.Models.History", "History")
                        .WithMany("Historymedications")
                        .HasForeignKey("HistoryId")
                        .HasConstraintName("historymedication_history_id_fkey")
                        .IsRequired();

                    b.HasOne("testing.Models.Medication", "Medication")
                        .WithMany("Historymedications")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("historymedication_medication_id_fkey")
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("testing.Models.Historyprocedure", b =>
                {
                    b.HasOne("testing.Models.History", "History")
                        .WithMany("Historyprocedures")
                        .HasForeignKey("HistoryId")
                        .HasConstraintName("historyprocedure_history_id_fkey")
                        .IsRequired();

                    b.HasOne("testing.Models.Procedure", "Procedure")
                        .WithMany("Historyprocedures")
                        .HasForeignKey("ProcedureId")
                        .HasConstraintName("historyprocedure_procedure_id_fkey")
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("testing.Models.Medcard", b =>
                {
                    b.HasOne("testing.Models.Patient", "Patient")
                        .WithOne("Medcard")
                        .HasForeignKey("testing.Models.Medcard", "PatientId")
                        .HasConstraintName("medcard_patient_id_fkey")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("testing.Models.Referral", b =>
                {
                    b.HasOne("testing.Models.Declaration", "Declaration")
                        .WithMany("Referrals")
                        .HasForeignKey("DeclarationId")
                        .HasConstraintName("referral_declaration_id_fkey")
                        .IsRequired();

                    b.HasOne("testing.Models.Department", "Department")
                        .WithMany("Referrals")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("referral_department_id_fkey")
                        .IsRequired();

                    b.Navigation("Declaration");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("testing.Models.Schedule", b =>
                {
                    b.HasOne("testing.Models.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("schedule_doctor_id_fkey")
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("testing.Models.Appointment", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("testing.Models.Declaration", b =>
                {
                    b.Navigation("Referrals");
                });

            modelBuilder.Entity("testing.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Referrals");
                });

            modelBuilder.Entity("testing.Models.Doctor", b =>
                {
                    b.Navigation("Declarations");

                    b.Navigation("Headdepartments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("testing.Models.Document", b =>
                {
                    b.Navigation("Historydocuments");
                });

            modelBuilder.Entity("testing.Models.History", b =>
                {
                    b.Navigation("Historydocuments");

                    b.Navigation("Historymedications");

                    b.Navigation("Historyprocedures");
                });

            modelBuilder.Entity("testing.Models.Medcard", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Declaration");
                });

            modelBuilder.Entity("testing.Models.Medication", b =>
                {
                    b.Navigation("Historymedications");
                });

            modelBuilder.Entity("testing.Models.Patient", b =>
                {
                    b.Navigation("Medcard");
                });

            modelBuilder.Entity("testing.Models.Procedure", b =>
                {
                    b.Navigation("Historyprocedures");
                });

            modelBuilder.Entity("testing.Models.Referral", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("testing.Models.Role", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("testing.Models.Schedule", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
